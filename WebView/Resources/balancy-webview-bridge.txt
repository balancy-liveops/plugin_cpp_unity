const balancy = {};
        
// Set up request-response functionality
(function() {
    // Store for pending requests
    const pendingRequests = {};
    
    // Counter for generating sequential IDs
    let requestCounter = 0;

    const RequestAction = {
        None: 0,
        GetProfile: 1,
        SetProfile: 2,
        GetLocalization: 10,
    };
    
    balancy.closeView = () => {
        balancy.postMessage("balancy_close_view");
    };

    balancy.getSystemProfileValue = (path) => {
        return balancy.sendRequest(RequestAction.GetProfile, {profile: "UnnyProfile", path});
    };

    balancy.getProfileValue = (profile, path) => {
        return balancy.sendRequest(RequestAction.GetProfile, {profile, path});
    };
    
    balancy.getLocalizedText = async function(key) {
        return balancy.sendRequest(RequestAction.GetLocalization, {key});
    };

    balancy.postMessage = function(message) {
        if (typeof message !== 'string') message = JSON.stringify(message);
        if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.BalancyWebView) {
            window.webkit.messageHandlers.BalancyWebView.postMessage(message);
            return true;
        }
        return false;
    };

    balancy._receiveMessageFromUnity = function(message) {
        try {
            const response = JSON.parse(message);
            if (response.type === 'response') {
                const request = pendingRequests[response.id];
                if (request) {
                    delete pendingRequests[response.id];
                    if (response.error) {
                        request.reject(new Error(response.error));
                    } else {
                        request.resolve(response.result);
                    }
                }
            }
        }  catch (error) {
            // console.error('Error handling response:', error);
        }
    };
    
    balancy.sendRequest = function(action, params = {}) {
        return new Promise((resolve, reject) => {
            const requestId = (requestCounter++).toString();
            
            pendingRequests[requestId] = {
                resolve: resolve,
                reject: reject,
                timestamp: Date.now()
            };
            
            const message = {
                type: 'request',
                id: requestId,
                action: action,
                params: params
            };
            
            balancy.postMessage(JSON.stringify(message));

            // setTimeout(() => {
            //     const request = pendingRequests[requestId];
            //     if (request) {
            //         delete pendingRequests[requestId];
            //         reject(new Error(`Request timeout: ${action}`));
            //     }
            // }, 10000); // 10 second timeout
        });
    };
    
    async function localizeAllElements() {
        const elements = document.querySelectorAll('[data-localization-key]');

        const localizationPromises = Array.from(elements).map(async (element) => {
            const key = element.getAttribute('data-localization-key');
            const localizedText = await balancy.getLocalizedText(key);
            element.textContent = localizedText;
        });

        await Promise.all(localizationPromises);

        document.dispatchEvent(new Event('localizationCompleted'));
    }
    
    // Set up the message listener (runs only once during initialization)
    balancy.initResponseHandler = function() {
        if (balancy._responseHandlerInitialized) return;
        
        // Mark as initialized
        balancy._responseHandlerInitialized = true;
        
        // Create a handler for incoming messages from Unity
        balancy.handleResponse = function(responseJson) {
            try {
                const response = JSON.parse(responseJson);
                
                // Look for a matching request
                const request = pendingRequests[response.id];
                if (request) {
                    // Remove from pending
                    delete pendingRequests[response.id];
                    
                    // Call the appropriate callback
                    if (response.error) {
                        request.reject(new Error(response.error));
                    } else {
                        request.resolve(response.result);
                    }
                }
            } catch (error) {
                console.error('Error handling response:', error);
            }
        };
        
        localizeAllElements();
    };
    
    // Initialize the response handler
    balancy.initResponseHandler();
})();